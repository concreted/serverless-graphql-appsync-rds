service: serverless-graphql-appsync-rds

frameworkVersion: ">=1.21.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-west-2
  profile: default
  environment:
    NODE_ENV: ${self:provider.stage}
    DATABASE_URL_DEV: sls-appsync.cgevud4qzseh.us-west-2.rds.amazonaws.com
    DATABASE_USER_DEV: mira
    DATABASE_PASSWORD_DEV: q2VdSXAZ2DYWEr8y
    DATABASE_NAME_DEV: posts

plugins:
  - serverless-appsync-plugin
  - serverless-offline
  - serverless-webpack

custom:
  accountId: 761633760558
  webpackIncludeModules: true
  appSync:
    name:  ${self:service}-${self:provider.stage}
    authenticationType: API_KEY

    mappingTemplates:
      # Query mapping templates
      - dataSource: Lambda
        type: Query
        field: getAuthor
        request: "getAuthor-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getAuthors
        request: "getAuthors-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getPost
        request: "getPost-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getPosts
        request: "getPosts-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getComment
        request: "getComment-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Query
        field: getComments
        request: "getComments-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      # Mutation mapping templates
      - dataSource: Lambda
        type: Mutation
        field: addPost
        request: "addPost-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: updatePost
        request: "updatePost-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: deletePost
        request: "deletePost-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: addComment
        request: "addComment-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: updateComment
        request: "updateComment-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Mutation
        field: deleteComment
        request: "deleteComment-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      # Type mapping templates
      - dataSource: Lambda
        type: Author
        field: posts
        request: "authorPosts-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Post
        field: comments
        request: "postComments-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Post
        field: author
        request: "postAuthor-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"
      - dataSource: Lambda
        type: Comment
        field: author
        request: "commentAuthor-request-mapping-template.txt"
        response: "generic-response-mapping-template.txt"

    serviceRole: "AppSyncServiceRole"
    dataSources:
      - type: AWS_LAMBDA
        name: Lambda
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: "arn:aws:lambda:${self:provider.region}:${self:custom.accountId}:function:${self:service}-${self:provider.stage}-graphql"
          serviceRoleArn: "arn:aws:iam::${self:custom.accountId}:role/${self:custom.appSync.serviceRole}"

functions:
  graphql:
    handler: handler.graphqlHandler

resources:
  Resources:
    AppSyncServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "AppSyncServiceRole"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          -
            PolicyName: "AppSyncServiceRole-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:${self:provider.region}:*:function:${self:service}-${self:provider.stage}-graphql"
                    - "arn:aws:lambda:${self:provider.region}:*:function:${self:service}-${self:provider.stage}-graphql:*"